<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.mapper.WorkTimeMapper">

    <select id="getWorkTimeListCount" resultType="java.lang.Long"
            parameterType="com.example.demo.service.workTime.WorkTimeCondition">
        SELECT
        count(1)
        FROM
        tr_user_extra_worktime t1
        LEFT JOIN m_user t2 ON
        t1.user_id = t2.user_id
        LEFT JOIN m_project t3 ON
        t1.project_id = t3.project_id
        LEFT JOIN m_user t4 ON
        t3.management_user_id = t4.user_id
        WHERE
        1 = 1
        <if test="!@org.springframework.util.StringUtils@isEmpty(userId)">
            AND t1.user_id = #{userId}
        </if>
        <if test="!@org.springframework.util.StringUtils@isEmpty(managerUserId)">
            AND t3.management_user_id = #{managerUserId}
        </if>
        <if test="!@org.springframework.util.StringUtils@isEmpty(projectId)">
            AND t1.project_id = #{projectId}
        </if>
    </select>

    <select id="getWorkTimeList" resultType="com.example.demo.entities.WorkTime"
            parameterType="com.example.demo.service.workTime.WorkTimeCondition">
        SELECT
        t1.user_id "userId"
        , t2.user_name "userName"
        , t1.target_date "targetDate"
        , t1.project_id "projectId"
        , t3.project_name "projectName"
        , t3.financial_id "financialId"
        , t4.user_name "pmName"
        , t1.apply_date "applyDate"
        , t1.time "time"
        , t1.reason "comment"
        , t1.applied "statusApply"
        , t1.pm_approved "statusPmApprove"
        , t1.dm_approved "statusDmApprove"
        , t1.create_by "createBy"
        , t1.create_at "createAt"
        , t1.update_by "updateBy"
        , t1.update_at "updateAt"
        , t1.user_id || '_' || t1.target_date || '_' || t1.project_id "id"
        FROM
        tr_user_extra_worktime t1
        LEFT JOIN m_user t2 ON
        t1.user_id = t2.user_id
        LEFT JOIN m_project t3 ON
        t1.project_id = t3.project_id
        LEFT JOIN m_user t4 ON
        t3.management_user_id = t4.user_id
        WHERE
        1 = 1
        <if test="!@org.springframework.util.StringUtils@isEmpty(userId)">
            AND t1.user_id = #{userId}
        </if>
        <if test="!@org.springframework.util.StringUtils@isEmpty(managerUserId)">
            AND t3.management_user_id = #{managerUserId}
        </if>
        AND t1.target_date <![CDATA[ >= ]]>STR_TO_DATE(#{day},'%Y,%m,%d')
        AND t1.target_date <![CDATA[ < ]]>DATE_ADD(STR_TO_DATE(#{day},'%Y,%m,%d'),INTERVAL 1 MONTH)
        <if test="!@org.springframework.util.StringUtils@isEmpty(projectId)">
            AND t1.project_id = #{projectId}
        </if>
        ORDER BY
        t1.target_date desc
    </select>

    <select id="getWorkTime" resultType="com.example.demo.entities.WorkTime">
        SELECT user_id     "userId"
             , project_id  "projectId"
             , `time`      "time"
             , reason      "comment"
             , applied     "statusApply"
             , pm_approved "statusPmApprove"
             , dm_approved "statusDmApprove"
             , create_by   "createBy"
             , create_at   "createAt"
             , update_by   "updateBy"
             , update_at   "updateAt"
        FROM tr_user_extra_worktime
        WHERE user_id = #{userId}
          AND project_id = #{projectId}
    </select>

    <select id="getWorkTimeCreateUse" resultType="com.example.demo.entities.WorkTime">
        SELECT user_id     "userId"
             , target_date "targetDate"
             , project_id  "projectId"
             , `time`      "time"
             , reason      "comment"
             , applied     "statusApply"
             , pm_approved "statusPmApprove"
             , dm_approved "statusDmApprove"
             , create_by   "createBy"
             , create_at   "createAt"
             , update_by   "updateBy"
             , update_at   "updateAt"
        FROM tr_user_extra_worktime
        WHERE user_id = #{userId}
          AND target_date = #{targetDate}
          AND project_id = #{projectId}
    </select>

    <delete id="deleteWorkTime">
        DELETE
        FROM tr_user_extra_worktime
        WHERE user_id = #{userId}
          AND target_date = #{targetDate}
          AND project_id = #{projectId}
    </delete>

    <insert id="creatWorkTime" parameterType="com.example.demo.entities.WorkTime">
        INSERT INTO tr_user_extra_worktime
        ( user_id
        , target_date
        , project_id
        , apply_date
        , `time`
        , reason
        , applied
        , pm_approved
        , dm_approved
        , create_by
        , create_at
        , update_by
        , update_at)
        VALUES ( #{userId}
               , #{targetDate}
               , #{projectId}
               , #{applyDate}
               , #{time}
               , #{comment}
               , #{statusApply}
               , '1'
               , '1'
               , #{createBy}
               , now()
               , #{updateBy}
               , now())
    </insert>

    <update id="updateWorkTime" parameterType="com.example.demo.entities.WorkTime">
        UPDATE
            tr_user_extra_worktime
        SET project_id  = #{projectId}
          , target_date = #{targetDate}
          , `time`      = #{time}
          , reason      = #{comment}
          , applied     = #{statusApply}
          , pm_approved = '1'
          , dm_approved = '1'
          , update_at   = NOW()
          , update_by   = #{updateBy}
        WHERE concat(user_id, '_', target_date, '_', project_id) = #{id}
    </update>

</mapper>